#!/usr/bin/python3
# get vault secrets and format into env var export statements that can be evaluated

# env var export approach inspired by
# http://blog.tintoy.io/2017/06/exporting-environment-variables-from-python-to-bash/

"""
Given an env var "V_FAKE_APP_PASSWORD" set to "secret/fake-app/users/fake-user/password"
    And a vault secret key "password" at "secret/fake-app/users/fake-user" set to "fake-password"
    And a vault "role-id" set in the env var "VAULT_ROLE_ID"
    And a vault "secret-id" set in the env var "VAULT_SECRET_ID"
    And a vault "address" set in the env var "VAULT_ADDR"
    And a vault "tmp-var-file" set in the env var "VAULT_VAR_FILE"
When I run "get-vault-secrets-by-approle"
    Then the output contains "export FAKE_APP_PASSWORD=fake-password"
"""

import os
import sys
import re
import hvac


# generic exception
class UsageError(Exception):
    def __init__(self, message):
        self.message = message

    usage_message = """
Usage: get-vault-secrets-by-approle
    Retrieves a set of vault secrets by searching for env vars prefixed with 'V_' which have
    been set to values corresponding to vault secret path/key combinations.
        "V_<env-var>=<mount_point>/<path>/<key>"

    Returns a set of export statements with the prefix stripped and the env var set to the
    value of the related secret.
        "export <env_var>=<secret_key_value>"

    The returned export statements can be redirected to a temporary file and sourced to
    set env var variables for subsequent scripts and tasks.
"""

class VaultSecretFactory:
    req_arg_vars = [
        'VAULT_ADDR',
        'VAULT_ROLE_ID',
        'VAULT_SECRET_ID',
    ]

    var_prefix = 'V_'
    vault_vars = {}
    client = None
    secret_vars = {}

    def __init__(self):
        self.client = hvac.Client()

    # throw an exception if required input env vars cannot be found
    def check_for_req_args(self):
        missing_args = []

        for k in self.req_arg_vars:
            v = os.environ.get(k)
            if v is None:
                missing_args.append(k)
        if missing_args:
            raise UsageError("Missing required env vars: %s" % missing_args)


    # return a dictionary of env vars that begin with the provided prefix
    def get_vault_vars(self):
        for k,v in os.environ.items():
            if k.startswith(self.var_prefix):
                self.vault_vars[k] = v


    def login_to_vault_using_approle(self):
        self.client.auth_approle(os.environ.get('VAULT_ROLE_ID'),
                                 os.environ.get('VAULT_SECRET_ID'))
        if not self.client.is_authenticated():
            raise UsageError("Unable to logon to vault with supplied VAULT_ROLE_ID/VAULT_SECRET_ID")


    def get_vault_secrets(self):
        # regex used to string the prefix from vault secrets var names
        prefix_re = r'^{}'.format(self.var_prefix)
        # regex to parse path into 3 named parts: <mount_point>/<path>/<key>
        secret_path_re = r'^(?P<mount_point>[^/]+)/(?P<path>.+)/(?P<key>[^/]+)$'
        for k,v in self.vault_vars.items():
            # parse the new env var name by stripping the prefix
            secret_var_name = re.sub(prefix_re, '', k)
            # parse the parts of the secret path
            m = re.fullmatch(secret_path_re, v)
            if m is None:
                raise ValueError("Invalid secret path: {}=\"{}\".  Expecting: \"<mount_point>/<path>/<key>\"".format(k,v))

            vault_path = m.groupdict()
            try:
                vault_secret = self.client.secrets.kv.v2.read_secret_version(
                    vault_path['path'], 0, vault_path['mount_point'])
                secret_var_val = vault_secret['data']['data'][vault_path['key']]
            except KeyError:
                raise KeyError("Invalid secret key {}=\"{}\".  Key \"{}\" not found.".format(
                    k, v, vault_path['key']))
            except hvac.exceptions.Forbidden:
                raise UsageError("Access to {}=\"{}\" forbidden".format(k, v))
            self.secret_vars[secret_var_name] = secret_var_val


    def print_export_statements(self):
        for k,v in self.secret_vars.items():
            print("export {}=\"{}\"".format(k,v))


    def run(self):
        try:
            self.check_for_req_args()
            self.get_vault_vars()
            self.login_to_vault_using_approle()
            self.get_vault_secrets()
            self.print_export_statements()

        except UsageError as err:
            sys.stderr.write(UsageError.usage_message)
            sys.stderr.write("Usage error: {}\n".format(err))
            sys.exit(os.EX_USAGE)
        except KeyError as err:
            sys.stderr.write("Error: {}\n".format(err))
            sys.exit(os.EX_DATAERR)
        except ValueError as err:
            sys.stderr.write("Error: {}\n".format(err))
            sys.exit(os.EX_DATAERR)


if __name__ == '__main__':
    vsf = VaultSecretFactory()
    vsf.run()
